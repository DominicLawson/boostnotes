type: "MARKDOWN_NOTE"
folder: "5dff1a9e2bfe696c8d39"
title: "Introducing Ethereum and Solidity"
content: '''
  # Introducing Ethereum and Solidity
  
  #### Chapter 3 - the evm
  <hr>
  
  The EVM can run arbitrary computer programs (the smart contracts mentioned in
  Chapter 1) written in the Solidity language  
  
  Solidity programs are capable of expressing all tasks accomplishable by computers, making them theoretically Turing complete. That means that the entire distributed network, every node, performs every program executed on the platform. 
  
  the eVM is a transaction singleton machine with shared state. In computing, this means it behaves like one giant data object, rather than what it is: a network of discrete machines, themselves singletons, in constant communication.
  
  pg. 50 - From the perspective of a software developer, the EVM is also a runtime environment for small programs that can be executed by the network.
  
  #### <u>The EVM Runs Bytecode</u>
  The EVM has its own language, the EVM bytecode, to which your smart contracts compile.
  Solidity, which is a high-level language, is compiled into bytecode and uploaded onto the Ethereum blockchain by using a client application such as the Mist browser or a full node.  
  
  
  pg. 55 - Generally speaking, the purpose of hash functions, in the context of a blockchain, is to compare large datasets quickly and evaluate whether their contents are similar. 
  
  pg 56 - In Bitcoin, a block is 10 minutes. This so-called block time is derived from constants hard-coded into Bitcoin’s issuance scheme, with a total of 21 million coins to be released from 2009 to 2024, and rewards halving every four years. 4 In Ethereum, block time is not a function of the issuance schedule of ether. Instead, block time is a variable that is kept as low as possible, for the sake of speedy transaction confirmation.
  
  
  pg. 59 - Gas is a unit of work; it’s not a subcurrency, and you can’t hold or hoard it. It simply measures how much effort each step of a transaction will be, in computational terms. To be able to pay for gas costs, you simply need to add ether to your account. You don’t have to acquire it separately; there is no gas token. Every operation possible on the EVM has an associated gas cost.
  
  #### <b>The combination of total gas used multiplied by gas price paid that results in the total fee accrued by a given transaction.</b>  
  
  
  pg. 61 - An externally owned account (EOA) is also known as an account controlled by a pair of private keys, which may be held by a person or an external server. These accounts cannot hold EVM code. Characteristics of an EOA include the following:
  •  Contains a balance of ether
  •  Capable of sending transactions
  •  Controlled by the account’s private keys
  •  Has no code associated with it
  •  A key/value database contained in each account, where keys and values are both 32-byte strings
  
  Contract accounts are not controlled by humans. They store instructions and are activated by external accounts or other contract accounts. Contract accounts have the following characteristics:
  •  Have an ether balance
  •  Hold some contract code in memory
  •  Can be triggered by humans (sending a transaction) or other contracts sending a message
  •  When executed, can perform complex operations
  •  Have their own persistent state and can call other contracts
  •  Have no owner after being released to the EVM
  •  A key/value database contained in each account, where keys and values are both 32-byte strings
  
  pg. 62 - A transaction in the EVM is a cryptographically signed data package storing a
  message (as described previously), which tells the EVM to transfer ether, create a new
  contract, trigger an existing one, or perform some calculation. Contract addresses can be the recipients of transactions, just like users with external accounts.
  
  
  Transactions contain the following:
  •  A recipient address; specifying no recipient (and attaching smart contract data) is the method for uploading new smart contracts. As you’ll see, a contract address is returned so that the user knows where to access this contract in the future.
  •  A signature identifying the sender
  •  A value field showing the amount being sent
  •  An optional data field, for a message (if this is being sent to a contract address)
  •  A STARTGAS value, indicating the maximum number of computational steps the transaction are prepaid
  •  A GASPRICE value, representing the fee the sender is willing to pay for gas
  
  
  pg. 63 - A message is a chunk of data sent by a contract to another contract (never to or from a human). Messages are virtual objects that are never serialized and exist only in the EVM. When a miner is paid in the Ethereum network, this is accomplished by way of a message to increment the miner’s payment address; it does not constitute a transaction.
  
  Messages are sent to other contract accounts, which in turn run the code enclosed in the message. Thus, contracts can have relationships with each other.
  A message contains the following:
  •  The sender address of the message
  •  The recipient address of the message
  •  The value field (indicating how much ether, if any, is being sent)
  •  An optional data field (containing input data for the contract)
  •  A STARTGAS value limiting the amount of gas the message can use
  
  Operation Name | Gas Cost | Description
  ---|---|---
  step  | 1 | Default amount per execution cycle
  stop | 0 | Free
  suicide | 0 | Free
  sha3 | 20 | SHA-3 hash function
  sload| 20| Gets from permanent storage
  sstore |100| Puts into permanent storage
  balance |20| Queries account balance
  create |100| Contract creation
  call |20| Initiating a read-only call
  memory |1| Every additional word when expanding memory
  txdata |5| Every byte of data or code for a transaction
  transaction |500| Base fee transaction
  contract creation |53,000| Changed in homestead from 21,000  
  
  <hr>
  
  #### Opcodes 
  
  In traditional web development, the rough equivalent of an opcode would be a
  HTTP verb, also known as an HTTP method. These include GET, POST, HEAD, OPTIONS, PUT,
  DELETE, TRACE, and CONNECT. 
  
  0s: Stop and Arithmetic Operations
  code| action | description
  --- | ---|---
  0x00 |STOP| Halts execution.
  0x01 |ADD| Addition operation.
  0x02 |MUL |Multiplication operation.
  0x03 |SUB |Subtraction operation.
  0x04 |DIV |Integer division operation.
  0x05 |SDIV| Signed integer.
  0x06 |MOD| Modulo.
  0x07 |SMOD| Signed modulo.
  0x08 |ADDMOD| Modulo.
  0x09 |MULMOD| Modulo.
  0x0a |EXP |Exponential operation.
  0x0b |SIGNEXTEND| Extend length of 2s (complement signed integer).
  10s: Comparison and Bitwise Logic Operations
  code|action|description
  --- | ---| ---
  0x10 |LT |Lesser-than comparison.
  0x11 |GT| Greater-than comparison.
  0x12 |SLT |Signed less-than comparison.
  0x13 |SGT| Signed greater-than comparison.
  0x14 |EQ| Equality comparison.
  0x15 |ISZERO| Simple NOT operator.
  0x16 |AND| Bitwise AND operation.
  0x17 |OR| Bitwise OR operation.
  0x18 |XOR| Bitwise XOR operation.
  0x19 |NOT| Bitwise NOT operation.
  0x1a |BYTE| Retrieve single byte from word.
  20s: SHA3
  code|action|description
  --- | ---| ---
  0x20 |SHA3| Compute Keccak-256 hash.
  30s: Environmental Information
  code|action|description
  --- | ---| ---
  0x30 |ADDRESS| Get address of currently executing account.
  0x31 |BALANCE| Get balance of the given account.
  0x32 |ORIGIN| Get execution origination address.
  0x33 |CALLER| Get caller address. This is the address of the account directly responsible for this execution.
  0x34 |CALLVALUE| Get deposited value by the instruction/transaction responsible for this execution.
  0x35| CALLDATALOAD| Get input data of current environment.
  0x36 |CALLDATASIZE| Get size of input data in current environment.
  0x37 |CALLDATACOPY| Copy input data in current environment to memory. Pertains to the input data passed with the message call instruction or transaction.
  0x38 |CODESIZE| Get size of code running in current environment.
  0x39| CODECOPY| Copy code running in current environment to memory.
  0x3a |GASPRICE| Get price of gas in current environment.
  0x3b| EXTCODESIZE| Get size of an account’s code.
  0x3c |EXTCODECOPY| Copy an account’s code to memory.
  40s: Block Information
  code|action|description
  --- | ---| ---
  0x40 |BLOCKHASH| Get the hash of one of the 256 most recent complete blocks.
  0x41 |COINBASE| Get the block’s beneficiary address.
  0x42| TIMESTAMP| Get the block’s timestamp.
  0x43 |NUMBER| Get the block’s number.
  0x44 |DIFFICULTY| Get the block’s difficulty.
  0x45 |GASLIMIT| Get the block’s gas limit.
  
  50s: Stack, Memory, Storage, and Flow Operations
  code|action|description
  --- | ---| ---
  0x50 |POP| Remove item from stack.
  0x51 |MLOAD| Load word from memory.
  0x52 |MSTORE| Save word to memory.
  0x53 |MSTORE8| Save byte to memory.
  0x54 |SLOAD| Load word from storage.
  0x55 |SSTORE| Save word to storage.
  0x56 |JUMP| Alter the program counter.
  0x57 |JUMPI| Conditionally alter the program counter.
  0x58 |PC| Get the value of the program counter prior to the increment.
  0x59 |MSIZE| Get the size of active memory in bytes.
  0x5a |GAS| Get the amount of available gas, including the corresponding reduction.
  0x5b |JUMPDEST| Mark a valid destination for jumps.
  60s and 70s: Push Operations
  code|action|description
  --- | ---| ---
  0x60| PUSH1| Place 1-byte item on stack.
  0x61 |PUSH2| Place 2-byte item on stack.
  0x7f| PUSH32| Place 32-byte (full word) item on stack.
  80s: Duplication Operations
  code|action|description
  --- | ---| ---
  0x80 |DUP1| Duplicate first stack item.
  0x81 |DUP2| Duplicate second stack item.
  0x8f |DUP16| Duplicate 16th stack item.
  90s: Exchange Operations
  code|action|description
  --- | ---| ---
  0x90 |SWAP1| Exchange first and second stack items.
  0x91 |SWAP2| Exchange first and third stack items.
  0x9f| SWAP16| Exchange 1st and 17th stack items.
  a0s: Logging Operations
  code|action|description
  --- | ---| ---
  0xa0 |LOG0| Append log record with no topics.
  0xa1 |LOG1| Append log record with one topic.
  0xa4 |LOG4| Append log record with four topics.
'''
tags: [
  "crypto"
  "ethereum"
  "solidity"
  "blockchain"
]
isStarred: false
createdAt: "2017-07-11T20:23:18.552Z"
updatedAt: "2017-07-12T04:24:57.205Z"
